{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["window","jQuery","$","Tether","Popper","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","url","blocks","handleChange","bind","assertThisInitialized","handleSubmit","tooltip","event","setState","target","value","preventDefault","web3","Web3","eth","net","isListening","getNetworkType","networkType","getBlockNumber","latestBlock","blockNumbers","i","Math","floor","push","Promise","all","map","_ref","asyncToGenerator","regenerator_default","a","mark","_callee","blockNumber","block","date","txCount","wrap","_context","prev","next","getBlock","t0","sent","Date","timestamp","toLocaleDateString","transactions","length","_this2","objectSpread","defineProperty","success","Boolean","hash","t1","message","stop","_x2","apply","arguments","_this3","keys","console","log","react_default","createElement","className","onSubmit","htmlFor","type","placeholder","style","minWidth","onChange","Fragment","concat","key","width","height","padding","backgroundColor","data-toggle","data-placement","data-html","title","Component","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4fd8720d.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport Web3 from \"web3\";\n// Boostrap loaders\nimport * as $ from \"jquery\";\nimport Tether from \"tether\";\nimport Popper from \"popper.js\";\nimport \"bootstrap\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./App.css\";\n\n// Initialize boostrap dependencies\nwindow.jQuery = window.$ = $;\nwindow.Tether = Tether;\nwindow.Popper = Popper;\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { url: \"https://mainnet.infura.io\", blocks: {} };\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  componentDidUpdate() {\n    $(function() {\n      $('[data-toggle=\"tooltip\"]').tooltip();\n    });\n  }\n\n  handleChange(event) {\n    this.setState({ url: event.target.value });\n  }\n\n  async handleSubmit(event) {\n    event.preventDefault();\n    const web3 = new Web3(this.state.url);\n    window.web3 = web3;\n    const isListening = await web3.eth.net.isListening();\n    const networkType = await web3.eth.net.getNetworkType();\n    this.setState({ isListening, networkType });\n    const latestBlock = await web3.eth.getBlockNumber();\n    this.setState({ latestBlock });\n\n    // Linspace\n    const blockNumbers = [];\n    for (let i = latestBlock; i > 0; i = i - Math.floor(latestBlock / 100)) {\n      blockNumbers.push(i);\n    }\n\n    // Query all blocks at the same time\n    await Promise.all(\n      blockNumbers.map(async blockNumber => {\n        try {\n          const block = (await web3.eth.getBlock(blockNumber)) || {};\n          const date = new Date(\n            (block.timestamp || 1) * 1000\n          ).toLocaleDateString();\n          const txCount = (block.transactions || []).length;\n          this.setState({\n            blocks: {\n              ...this.state.blocks,\n              [blockNumber]: {\n                success: Boolean(block.hash),\n                ...(block || {}),\n                date,\n                txCount\n              }\n            }\n          });\n        } catch (e) {\n          this.setState({\n            blocks: {\n              ...this.state.blocks,\n              [blockNumber]: {\n                success: false,\n                message: e.message\n              }\n            }\n          });\n        }\n      })\n    );\n  }\n\n  render() {\n    if (Object.keys(this.state.blocks).length)\n      console.log(\"You can inspect the blocks in detail here: \", {\n        blocks: this.state.blocks\n      });\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <div className=\"mb-3\">\n            <h4>Is my node fully synced?</h4>\n          </div>\n          <form className=\"form-inline mb-3\" onSubmit={this.handleSubmit}>\n            <div className=\"input-group\">\n              <label htmlFor=\"inputUrl\" className=\"sr-only\">\n                Url\n              </label>\n              <input\n                type=\"text\"\n                className=\"form-control\"\n                placeholder=\"Node url\"\n                style={{ minWidth: \"300px\" }}\n                value={this.state.url}\n                onChange={this.handleChange}\n              />\n              <div className=\"input-group-append\">\n                <button\n                  className=\"btn btn-secondary\"\n                  type=\"submit\"\n                  value=\"Submit\"\n                >\n                  Scan\n                </button>\n              </div>\n            </div>\n          </form>\n          {this.state.isListening && (\n            <React.Fragment>\n              <p>\n                Network <strong>{this.state.networkType}</strong> is listening{\" \"}\n                {\"latestBlock\" in this.state\n                  ? `, latest block: ${this.state.latestBlock}`\n                  : \"\"}\n              </p>\n\n              {Object.keys(this.state.blocks).length ? (\n                <div className=\"container\">\n                  <div className=\"row\">\n                    {Object.keys(this.state.blocks).map(blockNumber => {\n                      const block = this.state.blocks[blockNumber];\n                      return (\n                        <div\n                          key={blockNumber}\n                          className=\"col\"\n                          style={{\n                            width: \"2px\",\n                            height: \"40px\",\n                            padding: \"0px\",\n                            backgroundColor: block.success ? \"green\" : \"red\"\n                          }}\n                          data-toggle=\"tooltip\"\n                          data-placement=\"top\"\n                          data-html=\"true\"\n                          title={`<b>Block number</b> ${blockNumber} ${\n                            block.success\n                              ? `<b>Hash</b> ${block.hash} <br/> <b>Date</b> ${\n                                  block.date\n                                } <br/> <b>TX count</b> ${block.txCount}`\n                              : `Error: ${block.message}`\n                          }`}\n                        />\n                      );\n                    })}\n                  </div>\n                </div>\n              ) : null}\n            </React.Fragment>\n          )}\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}